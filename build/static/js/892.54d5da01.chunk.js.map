{"version":3,"file":"static/js/892.54d5da01.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetails.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__TQP58\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__2vaVP\",\"loading\":\"NewCommentForm_loading__e8+e2\",\"control\":\"NewCommentForm_control__OyEFL\",\"actions\":\"NewCommentForm_actions__Y3hGm\"};","import { useEffect, useRef, useState } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\n\n\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  \n  const [enteredText, setEnteredText] = useState(\"\");\n  const { sendRequest, status, error } = useHttp(addComment);\n  const commentTextRef = useRef();\n  const { onAddedComment } = props;\n\n  // console.log(props.quoteId);\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n    // optional: Could validate here\n    // send comment to server\n    sendRequest({commentData:{text: enteredText}, quoteId: props.quoteId});\n    setEnteredText(\"\");\n  };\n\n  const textChangeHandler = (event) => {\n    setEnteredText(event.target.value);\n  }\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && \n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      }\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Your Comment</label>\n        <textarea value={enteredText} onChange={textChangeHandler} id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__FrLFx\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__Ky0Xl\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useCallback, useEffect, useState } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport CommentsList from \"./CommentsList\";\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport { useParams } from 'react-router-dom';\n\nconst Comments = (props) => {\n  const params = useParams();\n  const quoteId = params.quoteID;\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const { sendRequest, status, data: loadedComments} = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [quoteId, sendRequest]);\n\n  const addCommentHandler = useCallback(() => {\n    sendRequest(quoteId);\n  },[sendRequest,quoteId]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  let comments;\n\n  if(status === 'pending') {\n    comments = (\n      <div className='centered'>\n        <LoadingSpinner />\n      </div>\n    )\n  }\n  \n  if(status === \"completed\" && loadedComments && loadedComments.length > 0) {\n    comments = (\n      <CommentsList comments={loadedComments}/>\n    )\n  }\n\n  if(status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = (\n      <p className = 'centered'>No Comments were added yet</p>\n    )\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={quoteId} onAddedComment={addCommentHandler}/>}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__KKV5L\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import React, { useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\"\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\n\r\n\r\nconst QuoteDetails = () => {\r\n    const params = useParams();\r\n\r\n    const {sendRequest, status, data:loadedQuote, error} = useHttp(getSingleQuote, true);\r\n    const match = useRouteMatch();\r\n\r\n    const {quoteID} = params;\r\n\r\n    useEffect(() => {\r\n        sendRequest(quoteID);\r\n    },[sendRequest, quoteID]);    \r\n\r\n    if (status === \"pending\") {\r\n        return <div className=\"centered\"> \r\n            <LoadingSpinner />\r\n        </div>\r\n    };\r\n\r\n    if (error) {\r\n        return <p className=\"centered focused\">{error}</p>\r\n    };\r\n\r\n    if (!loadedQuote) {\r\n        return <p>No Quotes Found</p>\r\n    };\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author} />\r\n            <Route path={`${match.url}`} exact>\r\n                <div className=\"centered\">\r\n                    <Link className=\"btn--flat\" to={`${match.url}/comments`}>Load Comments</Link>\r\n                </div>\r\n            </Route>\r\n            <Route path={`${match.url}/comments`}>\r\n                <Comments quoteId={quoteID}/>\r\n            </Route>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default QuoteDetails;"],"names":["props","useState","enteredText","setEnteredText","useHttp","addComment","sendRequest","status","error","commentTextRef","useRef","onAddedComment","useEffect","submitFormHandler","event","preventDefault","commentData","text","quoteId","className","classes","onSubmit","LoadingSpinner","htmlFor","value","onChange","target","id","rows","ref","comments","map","comment","useParams","quoteID","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","addCommentHandler","useCallback","length","onClick","author","params","getSingleQuote","loadedQuote","match","useRouteMatch","path","url","exact","to"],"sourceRoot":""}